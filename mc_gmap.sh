#!/bin/bash
#
##
#   MC GoogleMap, an admin script to render Minecraft map with Pigmap
#   Copyright (C) 2011 Kevin "Kawo" Audebrand (kevin.audebrand@gmail.com)
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
#


#
# CONFIG START HERE
#
MC_GMAP_PATH=/path/to/mc_gmap-1.4.1          # path to this script
WORLD_PATH=/path/to/minecraft/world          # path to the world folder
WEB_PATH=/path/to/web/folder                 # path where the map will be rendered
THREAD_NUMBER=1                              # number of threads to use while generating map (usually 1 thread per cpu core)
WEB_USER=www-data                            # user that can serve web files
WEB_GROUP=www-data                           # group that can serve web files
HOMES_DIR=/path/to/folder/with/players/homes # path to where Essentials store players's homes
SERVER_ADMIN=                                # the MINECRAFT ACCOUNT of the server's admin (just if you plan to show players's homes on map)
#
# CONFIG END HERE
#

#
# DO NOT MODIFY ANYTHING FROM NOW
# (unless you know what you are doing)
#

#
# Global variables
#
PIGMAP_B=6
PIGMAP_T=1
MC_GMAP_VERSION=1.4.1
PIGMAP_EXEC=""
ME=`whoami`
MC_GMAP_ERROR=0
COLOROFF="\033[1;0m"
BLUECOLOR="\033[1;36m"
DARKBLUECOLOR="\033[1;34m"
LILACOLOR="\033[1;35m"
REDCOLOR="\033[1;31m"
GREENCOLOR="\033[1;32m"

#
# Function to check config
#
checkConfig ()  {
	echo -e "\n${DARKBLUECOLOR}- MC GoogleMap v$MC_GMAP_VERSION -${COLOROFF}\n"
	# Check if this script path is correct
	if [ -f $MC_GMAP_PATH/pigmap/pigmap ]
		then
			echo -e "> Path to this script: ${GREENCOLOR}OK${COLOROFF}"
			PIGMAP_EXEC="$MC_GMAP_PATH/pigmap/pigmap"
		else
			echo -e "> Path to this script: ${REDCOLOR}ERROR\nI can not find pigmap in ($MC_GMAP_PATH/pigmap)!\nWrong path or you have not compiled pigmap?${COLOROFF}"
			MC_GMAP_ERROR=1
	fi
	# Check if world path is correct
	if [ -f $WORLD_PATH/level.dat ]
        	then
	                echo -e "> Path to Minecraft world: ${GREENCOLOR}OK${COLOROFF}"
        	else
                	echo -e "> Path to Minecraft world: ${REDCOLOR}ERROR\nPath to Minecraft world is wrong ($WORLD_PATH)!${COLOROFF}"
	                MC_GMAP_ERROR=1
	fi
	# Check if web path is correct (if not, it will try to create one with provided informations)
	if [ -d $WEB_PATH ]
		then
			echo -e "> Path to the web folder: ${GREENCOLOR}OK${COLOROFF}"
		else
			echo -e "${LILACOLOR}Path to the web folder does not exist. Trying to create $WEB_PATH...${COLOROFF}"
			mkdir -p $WEB_PATH
			if [ $? -eq 0 ]
				then
					echo -e "${GREENCOLOR}OK${COLOROFF}"
				else
					echo -e "${REDCOLOR}ERROR! Can not create ($WEB_PATH)! Wrong permissions?${COLOROFF}"
					MC_GMAP_ERROR=1
			fi
	fi
	# Check if Minecraft textures are availables
	if [ -f $MC_GMAP_PATH/pigmap/terrain.png ]
                then
                        echo -e "> Textures file terrain.png is available: ${GREENCOLOR}OK${COLOROFF}\n"
                else
                        echo -e "> Textures file terrain.png is available: ${REDCOLOR}ERROR\nTextures file terrain.png is not here! Please provide one in $MC_GMAP_PATH/pigmap${COLOROFF}"
			MC_GMAP_ERROR=1
        fi
	# If it trigger a fatal error to process map, exit this script
	if [ $MC_GMAP_ERROR != 0 ]
		then
			echo -e ""
			exit 1
	fi
}

#
# Building command line and execute it
#
buildCmd () {
	# Check config first
	checkConfig
	# Check if we do a full or incremental render by checking if a map is already generated by looking for pigmap.params file
	# If present, assuming that we can do incremental render safely by generating a list of modified regions
	# (original regions list code snippet from tdebarochez (https://gist.github.com/922978))
	if [ -f $WEB_PATH/pigmap.params ]
		then
			echo -e "\nBuilding list of modified regions..."
			find $WORLD_PATH/region/ -newer $WEB_PATH/pigmap.params > $WEB_PATH/regionslist.txt
			echo -e "${GREENCOLOR}OK${COLOROFF}"
			echo -e "\nStarting incremental render...\n"
			# Just a little check if THREAD_NUMBER was provided to no broke command line
			if [ "$THREAD_NUMBER" != "" ]
				then
					CMD="$PIGMAP_EXEC -h $THREAD_NUMBER -i $WORLD_PATH -o $WEB_PATH -r $WEB_PATH/regionslist.txt -g $MC_GMAP_PATH/pigmap -m $MC_GMAP_PATH/pigmap -x"
				else
					CMD="$PIGMAP_EXEC -h 1 -i $WORLD_PATH -o $WEB_PATH -r $WEB_PATH/regionslist.txt -g $MC_GMAP_PATH/pigmap -m $MC_GMAP_PATH/pigmap -x"
			fi
		else
			echo -e "\nStarting full render...\n"
			if [ "$THREAD_NUMBER" != "" ]
                                then
                                        CMD="$PIGMAP_EXEC -h $THREAD_NUMBER -i $WORLD_PATH -o $WEB_PATH -B $PIGMAP_B -T $PIGMAP_T -g $MC_GMAP_PATH/pigmap -m $MC_GMAP_PATH/pigmap"
                                else
                                        CMD="$PIGMAP_EXEC -h 1 -i $WORLD_PATH -o $WEB_PATH -B $PIGMAP_B -T $PIGMAP_T -g $MC_GMAP_PATH/pigmap -m $MC_GMAP_PATH/pigmap"
                        fi
		fi
	# Executing command line
	$CMD
	if [ $? -eq 0 ]
     		then
			# If command line successfull, we try to convert PNG to JPG
			# First we check if ImageMagick is installed by trying to hash mogrify (an executable from IM)
			# If it's OK, we convert images, if not, just a warning to tell user to install ImageMagick for next time
			# (original png to jpg code snippet from packetcollision (https://github.com/packetcollision))
			echo -e "\nConverting PNG to JPG..."
			hash mogrify >/dev/null 2>&1
			if [ $? -eq 0 ]
				then
					 if [ -f $WEB_PATH/lastupdate ]
                               			then
		                                        find $WEB_PATH -name \*.png -a -newer $WEB_PATH/lastupdate -print0 | xargs -0 mogrify -format jpg -background \#E5E3DF -flatten
                		                        touch $WEB_PATH/lastupdate
                                		        echo -e "${GREENCOLOR}OK${COLOROFF}"
		                                else
                		                        find $WEB_PATH -name \*.png -print0 | xargs -0 mogrify -format jpg -background \#E5E3DF -flatten
                                		        touch $WEB_PATH/lastupdate
		                                        echo -e "${GREENCOLOR}OK${COLOROFF}"
                		        fi
					# Dont forget to change 'png' to 'jpg' and vice versa in pigmap-default.html!
					sed -i 's/'png'/'jpg'/g' $WEB_PATH/pigmap-default.html
				else
					echo -e "${LILACOLOR}Warning! You have to install ImageMagick package for that ("aptitude install imagemagick" for debian)${COLOROFF}"
					sed -i 's/'jpg'/'png'/g' $WEB_PATH/pigmap-default.html
			fi
			# If user calling this script is root, we can change web folder permissions
			# to match thus provided in config part
			if [ "$ME" != "root" ]
				then
					echo -e "\nGenerating index.html..."
					cp -f $WEB_PATH/pigmap-default.html $WEB_PATH/index.html
					if [ $? -eq 0 ]
						then
		                		        echo -e "${GREENCOLOR}OK!\n\nMap generation is over! Dont forget to check your web folder permissions if you have 403 error.${COLOROFF}\n"
						else
							echo -e "${REDCOLOR}ERROR!\nCan not create index.html! You have to do it youself by copying pigmap-default.html to index.html${COLOROFF}"
					fi
				else
					echo -e "\nGenerating index.html..."
                                        cp -f $WEB_PATH/pigmap-default.html $WEB_PATH/index.html
					if [ $? -eq 0 ]
						then
							echo -e "${GREENCOLOR}OK!${COLOROFF}\nSetting permissions for web folder..."
							chown -R $WEB_USER:$WEB_GROUP $WEB_PATH
							if [ $? -eq 0 ]
								then
									echo -e "${GREENCOLOR}OK!\n\nMap generation is over!${COLOROFF}\n"
								else
									echo -e "${REDCOLOR}ERROR!\nCan not change web folder permissions ($WEB_PATH)! You have to do it yourself if you have 403 error.${COLOROFF}\n"
							fi
						else
							echo -e "${REDCOLOR}ERROR!\nCan not create index.html! You have to do it youself by copying pigmap-default.html to index.html${COLOROFF}"
					fi
			fi
		else
			echo -e "\n${REDCOLOR}Map generation totaly FAILED! (and I dont know why :'()${COLOROFF}"
	fi
}

#
# Function to clean pigmap textures cache
#
clean () {
	echo -e "\n${DARKBLUECOLOR}- MC GoogleMap v$MC_GMAP_VERSION -${COLOROFF}\n"
	echo -e "Cleaning textures..."
	rm -rf $MC_GMAP_PATH/pigmap/blocks-*
	if [ $? -eq 0 ]
		then
			echo -e "${GREENCOLOR}OK!${COLOROFF}\n"
		else
			echo -e "${REDCOLOR}ERROR!\nCan not clean files $MC_GMAP_PATH/$GENERATOR_DIR/blocks-*!${COLOROFF}\n"
			exit 1
	fi
}

#
# Players's homes on webmap
#
homes () {
	echo -e "\n${DARKBLUECOLOR}- MC GoogleMap v$MC_GMAP_VERSION -${COLOROFF}\n"
	echo -e "Rendering players's homes on webmap...\n"

	HOMES_CONF_ERROR=0

	# Check if homes path is correct by checking if there is a file with server's admin name
	# (I choose server's admin name because it should be, obviously at least, present...but you can provide anyone else)
	if [ -f $HOMES_DIR/$SERVER_ADMIN.yml ]
		then
			echo -e "> Path to players's homes: ${GREENCOLOR}OK${COLOROFF}"
		else
			echo -e "> Path to players's homes: ${REDCOLOR}ERROR\nThe path to players's homes ($HOMES_DIR) is not valid!${COLOROFF}"
			HOMES_CONF_ERROR=1
	fi

	# Check if homes.js is present, if not create one
	if [ -f $WEB_PATH/homes.js ]
		then
			echo -e "> File with players's homes exist: ${GREENCOLOR}OK${COLOROFF}\n"
		else
			echo -e "${LILACOLOR}File with players's homes does not exist, creating $WEB_PATH/homes.js...${COLOROFF}"
			touch $WEB_PATH/homes.js
			if [ $? -eq 0 ]
                               then
                                       echo -e "${GREENCOLOR}OK${COLOROFF}\n"
                               else
                                       echo -e "${REDCOLOR}ERROR!\nCan not create players's homes file ($WEB_PATH/homes.js)! Wrong permissions ?${COLOROFF}\n"
                                       HOMES_CONF_ERROR=1
                        fi
	fi
	# If there is one fatal error, exit this script
	if [ $HOMES_CONF_ERROR != 0 ]
		then
			exit 1
	fi

	# Now we can scan folder with homes and format data for webmap
	HOMES_ERROR=0
	# We write the var in homes.js that will handle all homes data
	echo "var homeData=[" > $WEB_PATH/homes.js
	if [ $? != 0 ]
		then
			HOMES_ERROR=1
	fi
	# Going in homes folder then loop between each file to collect data
	cd $HOMES_DIR
	shopt -s nullglob
	for file in *.yml
	do
		if [ -s $file ]
		then
			HOME_NICK_MARKER=0
			HOME_MC_ACCOUNT_NAME="${file%.*}"
			while read line
			do
				if [[ $line == home:* ]]
				then
					HOME_COORDS="${line//[home: \[\]]/}"
					HOME_COORD_X=`echo $HOME_COORDS | awk 'BEGIN {FS=","} {print $1}'`
					HOME_COORD_Y=`echo $HOME_COORDS | awk 'BEGIN {FS=","} {print $2}'`
					HOME_COORD_Z=`echo $HOME_COORDS | awk 'BEGIN {FS=","} {print $3}'`
				fi
				# If we found a nickname, we gather it too
				if [[ $line == nickname:* ]]
				then
					HOME_NICKNAME=`echo $line | awk 'BEGIN {FS=" "} {print $2}'`
					HOME_NICK_MARKER=1
				fi
			done < $file
			if [ $HOME_NICK_MARKER != 0 ]
			then
				echo "{\"type\": \"home\", \"msg\": \"$HOME_NICKNAME ($HOME_MC_ACCOUNT_NAME)\", \"x\": $HOME_COORD_X, \"y\": $HOME_COORD_Y, \"z\": $HOME_COORD_Z}," >> $WEB_PATH/homes.js
			else
				echo "{\"type\": \"home\", \"msg\": \"$HOME_MC_ACCOUNT_NAME\", \"x\": $HOME_COORD_X, \"y\": $HOME_COORD_Y, \"z\": $HOME_COORD_Z}," >> $WEB_PATH/homes.js
			fi
		fi
	done
	if [ $? != 0 ]
		then
			HOMES_ERROR=1
	fi
	# Closing var
	echo "]" >> $WEB_PATH/homes.js
	if [ $? != 0 ]
		then
			HOMES_ERROR=1
	fi
	if [ $HOMES_ERROR != 0 ]
		then
			echo -e "${REDCOLOR}ERROR!\nHomes generation failed!${COLOROFF}\n"
		else
			echo -e "${GREENCOLOR}OK!\nHomes generation on webmap is over!${COLOROFF}\n"
	fi
}

#
# Script calls
#
case "$1" in

	start)
	buildCmd
	exit 0
	;;

	check)
	checkConfig
	exit 0
	;;

	clean)
	clean
	exit 0
	;;

	homes)
	homes
	exit 0
	;;

	*)
	echo -e "\n${DARKBLUECOLOR}- MC GoogleMap v$MC_GMAP_VERSION -${COLOROFF}\n\nHow to use: bash mc_gmap.sh {start|check|clean|homes}\n\nstart - generate map\ncheck - check config\nclean - clean pigmap's textures cache\nhomes - print players's homes on map\n"
	exit 1
	;;
esac
